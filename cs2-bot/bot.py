from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
)
import datetime

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
FROM, TWITCH_NAME, SCREENSHOT, ITEM, TRADE_LINK, STREAM_DATE, TRADEBAN_DAYS = range(7)

# –°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –ê–Ω—Ç–æ–Ω!\n–í—ã–±–µ—Ä–∏, –æ—Ç –∫–æ–≥–æ –∑–∞—è–≤–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton("Rusi4TV")], [KeyboardButton("A_S_L")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return FROM

# –í—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
async def from_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["from"] = update.message.text
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫ –Ω–∞ Twitch:")
    return TWITCH_NAME

async def twitch_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["twitch_name"] = update.message.text
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ Twitch:")
    return SCREENSHOT

async def screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        context.user_data["screenshot"] = update.message.photo[-1].file_id
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ –°–ö–†–ò–ù–®–û–¢.")
        return SCREENSHOT

    await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    return ITEM

async def item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["item"] = update.message.text
    await update.message.reply_text("–í—Å—Ç–∞–≤—å —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É:")
    return TRADE_LINK

async def trade_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["trade_link"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É —Å—Ç—Ä–∏–º–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
    return STREAM_DATE

async def stream_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["stream_date"] = update.message.text
    await update.message.reply_text("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å–ø–∞–¥—ë—Ç —Ç—Ä–µ–π–¥-–±–∞–Ω?")
    return TRADEBAN_DAYS

async def tradeban_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        days = int(update.message.text)
        date_unban = datetime.date.today() + datetime.timedelta(days=days)
        context.user_data["unban_date"] = date_unban.strftime("%Y-%m-%d")
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–Ω—è—Ç–∏—è —Ç—Ä–µ–π–¥-–±–∞–Ω–∞.")
        return TRADEBAN_DAYS

    data = context.user_data
    await update.message.reply_photo(
        photo=data["screenshot"],
        caption=(
            f"üì¨ –ó–∞—è–≤–∫–∞:\n"
            f"üë§ –û—Ç: {data['from']}\n"
            f"üéÆ Twitch: {data['twitch_name']}\n"
            f"üéÅ –ü—Ä–µ–¥–º–µ—Ç: {data['item']}\n"
            f"üîó –¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞: {data['trade_link']}\n"
            f"üìÖ –î–∞—Ç–∞ —Å—Ç—Ä–∏–º–∞: {data['stream_date']}\n"
            f"‚è≥ –¢—Ä–µ–π–¥-–±–ª–æ–∫ –¥–æ: {data['unban_date']}"
        )
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token("7689057554:AAGLXbPd6s_S8aMJfLgnw1Bhie53i3IZ5NE").build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, from_handler)],
            TWITCH_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, twitch_name)],
            SCREENSHOT: [MessageHandler(filters.PHOTO, screenshot)],
            ITEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, item)],
            TRADE_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, trade_link)],
            STREAM_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, stream_date)],
            TRADEBAN_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, tradeban_days)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
