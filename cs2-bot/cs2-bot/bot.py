
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, CallbackQueryHandler, filters, ConversationHandler
)
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 868478841

(
    CHOOSE_SENDER,
    ENTER_TWITCH_NICK,
    UPLOAD_SCREENSHOT,
    ENTER_ITEM,
    ENTER_STREAM_DATE,
    ENTER_TRADE_LINK,
    FINISHED
) = range(7)

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Rusi4TV", callback_data='Rusi4TV')],
        [InlineKeyboardButton("A_S_L", callback_data='A_S_L')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", reply_markup=reply_markup)
    return CHOOSE_SENDER

async def choose_sender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data[query.from_user.id] = {'sender': query.data}
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –Ω–∞ Twitch:")
    return ENTER_TWITCH_NICK

async def enter_twitch_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_user.id]['twitch_nick'] = update.message.text
    await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç Twitch –∞–∫–∫–∞—É–Ω—Ç–∞:")
    return UPLOAD_SCREENSHOT

async def upload_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return UPLOAD_SCREENSHOT
    photo_file_id = update.message.photo[-1].file_id
    user_data[update.effective_user.id]['screenshot'] = photo_file_id
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:")
    return ENTER_ITEM

async def enter_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_user.id]['item'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—Ç—Ä–∏–º–∞:")
    return ENTER_STREAM_DATE

async def enter_stream_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_user.id]['stream_date'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É:")
    return ENTER_TRADE_LINK

async def enter_trade_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_user.id]['trade_link'] = update.message.text
    data = user_data[update.effective_user.id]
    text = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
        f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {data['sender']}\n"
        f"üéÆ Twitch –Ω–∏–∫: {data['twitch_nick']}\n"
        f"üéÅ –ü—Ä–µ–¥–º–µ—Ç: {data['item']}\n"
        f"üìÖ –î–∞—Ç–∞ —Å—Ç—Ä–∏–º–∞: {data['stream_date']}\n"
        f"üîó –¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞: {data['trade_link']}"
    )
    await context.bot.send_photo(chat_id=ADMIN_ID, photo=data['screenshot'], caption=text)
    await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await update.message.reply_text("üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n(–ü–æ–∫–∞ —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ Telegram)")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_SENDER: [CallbackQueryHandler(choose_sender)],
            ENTER_TWITCH_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_twitch_nick)],
            UPLOAD_SCREENSHOT: [MessageHandler(filters.PHOTO, upload_screenshot)],
            ENTER_ITEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_item)],
            ENTER_STREAM_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_stream_date)],
            ENTER_TRADE_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_trade_link)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("admin", admin))

    app.run_polling()

if __name__ == "__main__":
    main()
