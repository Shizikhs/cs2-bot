
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)
from datetime import datetime, timedelta

FROM, NICK, SCREENSHOT, ITEM, TRADELINK, STREAM_DATE, BAN_DAYS = range(7)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –ê–Ω—Ç–æ–Ω!\n–û—Ç –∫–æ–≥–æ –∑–∞—è–≤–∫–∞? (Rusi4TV / A_S_L)")
    return FROM

async def from_sender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["from"] = update.message.text.strip()
    await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–∏–∫ –Ω–∞ Twitch:")
    return NICK

async def twitch_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nick"] = update.message.text.strip()
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ Twitch:")
    return SCREENSHOT

async def twitch_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        context.user_data["screenshot_file_id"] = update.message.photo[-1].file_id
        await update.message.reply_text("–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç (—Å–∫–∏–Ω) —Ç—ã –≤—ã–∏–≥—Ä–∞–ª?")
        return ITEM
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ **—Ñ–æ—Ç–æ**, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.")
        return SCREENSHOT

async def item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["item"] = update.message.text.strip()
    await update.message.reply_text("–í—Å—Ç–∞–≤—å —Å–≤–æ—é —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É:")
    return TRADELINK

async def trade_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["tradelink"] = update.message.text.strip()
    await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É —Å—Ç—Ä–∏–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.05.2025):")
    return STREAM_DATE

async def stream_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["date"] = update.message.text.strip()
    await update.message.reply_text("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å–ø–∞–¥—ë—Ç —Ç—Ä–µ–π–¥-–±–∞–Ω?")
    return BAN_DAYS

async def ban_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        days = int(update.message.text.strip())
        unban_date = datetime.now() + timedelta(days=days)
        context.user_data["ban_days"] = days
        context.user_data["unban_date"] = unban_date.strftime("%d.%m.%Y")

        data = context.user_data
        message = (
            f"üì© –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–∫–∏–Ω:\n\n"
            f"üë§ –ü—Ä–∏–≤–µ—Ç, –ê–Ω—Ç–æ–Ω!\n"
            f"üë• –û—Ç: {data['from']}\n"
            f"üéÆ Twitch –Ω–∏–∫: {data['nick']}\n"
            f"üéÅ –ü—Ä–µ–¥–º–µ—Ç: {data['item']}\n"
            f"üîó –¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞: {data['tradelink']}\n"
            f"üìÖ –î–∞—Ç–∞ —Å—Ç—Ä–∏–º–∞: {data['date']}\n"
            f"‚è≥ –¢—Ä–µ–π–¥-–±–∞–Ω —Å–ø–∞–¥—ë—Ç: {data['unban_date']} (—á–µ—Ä–µ–∑ {data['ban_days']} –¥–Ω–µ–π)"
        )

        await update.message.reply_photo(
            photo=data["screenshot_file_id"],
            caption=message
        )
        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 8")
        return BAN_DAYS

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token("7689057554:AAGLXbPd6s_S8aMJfLgnw1Bhie53i3IZ5NE").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, from_sender)],
            NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, twitch_nick)],
            SCREENSHOT: [MessageHandler(filters.PHOTO, twitch_screenshot)],
            ITEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, item)],
            TRADELINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, trade_link)],
            STREAM_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, stream_date)],
            BAN_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ban_days)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
