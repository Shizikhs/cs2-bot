import os
import logging
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, CallbackQueryHandler, ContextTypes
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –®–∞–≥–∏ —Ñ–æ—Ä–º—ã
CHOOSING_STREAMER, GET_TWITCH, GET_SCREENSHOT, GET_ITEM, GET_TRADELINK, CONFIRM = range(6)

ADMIN_ID = 868478841
TRADE_BAN_DAYS = 8

user_data_store = {}
completed_requests = []

def format_date():
    return datetime.now().strftime("%d.%m.%Y")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Rusi4TV", callback_data="Rusi4TV"),
         InlineKeyboardButton("A_S_L", callback_data="A_S_L")]
    ]
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç –∫–∞–∫–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞ —Ç—ã –ø—Ä–∏—à–µ–ª?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSING_STREAMER

async def streamer_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["streamer"] = query.data
    context.user_data["username"] = query.from_user.username or query.from_user.full_name
    await query.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π Twitch –Ω–∏–∫:")
    return GET_TWITCH

async def get_twitch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["twitch_nick"] = update.message.text
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–≤–æ–µ–≥–æ Twitch –∞–∫–∫–∞—É–Ω—Ç–∞:")
    return GET_SCREENSHOT

async def get_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["screenshot"] = update.message.photo[-1].file_id
    await update.message.reply_text("–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —Ç—ã –≤—ã–∏–≥—Ä–∞–ª?")
    return GET_ITEM

async def get_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["item"] = update.message.text
    context.user_data["date"] = format_date()
    await update.message.reply_text("–í—Å—Ç–∞–≤—å —Å–≤–æ—é —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É:")
    return GET_TRADELINK

async def get_tradelink(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["tradelink"] = update.message.text

    username = context.user_data["username"]
    if username not in user_data_store:
        user_data_store[username] = []

    user_data_store[username].append(context.user_data.copy())

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    msg = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n–°—Ç—Ä–∏–º–µ—Ä: {context.user_data['streamer']}\nTwitch: {context.user_data['twitch_nick']}\n–ü—Ä–µ–¥–º–µ—Ç: {context.user_data['item']}\n–î–∞—Ç–∞: {context.user_data['date']}\n–¢—Ä–µ–π–¥: {context.user_data['tradelink']}"
    await context.bot.send_photo(chat_id=ADMIN_ID, photo=context.user_data["screenshot"], caption=msg, reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"done|{username}|{context.user_data['date']}")]
    ]))

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    await update.message.reply_text("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –≤ –Ω–∞—à [–¥–∏—Å–∫–æ—Ä–¥](https://discord.gg/3AQ4nHZxtk) üéâ", parse_mode="Markdown")
    await update.message.reply_text("–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∫–æ–Ω—Ü–∞ —Ç—Ä–µ–π–¥-–±–∞–Ω–∞?",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"ban|{context.user_data['date']}")]])
    )
    return ConversationHandler.END

async def trade_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    _, date_str = query.data.split("|")
    claim_date = datetime.strptime(date_str, "%d.%m.%Y")

    days_passed = (datetime.now() - claim_date).days
    remaining = TRADE_BAN_DAYS - days_passed

    await query.answer()
    if remaining > 0:
        await query.edit_message_text(f"–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–π–¥-–±–∞–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –¥–Ω–µ–π")
    else:
        await query.edit_message_text("–¢—Ä–µ–π–¥-–±–∞–Ω –∏—Å—Ç–µ–∫, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç.")

async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    _, username, date = query.data.split("|")
    completed_requests.append((username, date))
    await context.bot.send_message(chat_id=ADMIN_ID, text=f"–ó–∞—è–≤–∫–∞ –æ—Ç @{username} –æ—Ç {date} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    await context.bot.send_message(chat_id=query.from_user.id, text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ —Ç—Ä–µ–π–¥")
    await query.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    await query.edit_message_reply_markup(None)

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    keyboard = [
        [InlineKeyboardButton("–í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="show_all")],
        [InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data="show_done")]
    ]
    await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=InlineKeyboardMarkup(keyboard))

async def show_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "show_all":
        msg = "–í—Å–µ –∑–∞—è–≤–∫–∏:\n"
        for user, entries in user_data_store.items():
            for e in entries:
                msg += f"@{user} | {e['item']} | {e['date']}\n"
        await query.edit_message_text(msg or "–ù–µ—Ç –∑–∞—è–≤–æ–∫.")
    elif query.data == "show_done":
        msg = "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n"
        for u, d in completed_requests:
            msg += f"@{u} | {d}\n"
        await query.edit_message_text(msg or "–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_STREAMER: [CallbackQueryHandler(streamer_choice)],
            GET_TWITCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_twitch)],
            GET_SCREENSHOT: [MessageHandler(filters.PHOTO, get_screenshot)],
            GET_ITEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_item)],
            GET_TRADELINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_tradelink)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(trade_status, pattern="^ban\|"))
    app.add_handler(CallbackQueryHandler(mark_done, pattern="^done\|"))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(CallbackQueryHandler(show_requests, pattern="^show_"))

    app.run_polling()

if __name__ == "__main__":
    main()